/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and listings, with public read access for listings.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /listings/{listingId}: Stores rental property listings with a denormalized userId field.
 * - /rental_types/{rentalTypeId}: Stores categories of rental options.
 * - /platformSettings/config: Stores global platform settings (admin-only access).
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Listings are publicly readable, but only the owner can create, update, or delete them.
 * - Listing ownership is determined by the `userId` field on the listing document.
 * - Rental types are publicly readable. Write operations are not permitted.
 *
 * Denormalization for Authorization:
 * - The `listings` collection denormalizes the `userId` to avoid costly `get()` calls when checking listing ownership.
 *
 * Structural Segregation:
 * - Public listings are stored in a top-level collection, while private user data is stored under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring only the authenticated user can access their own data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user can access their own profile.
     * @deny (create) - Unauthenticated user attempting to create a profile.
     * @deny (get, update, delete) - Authenticated user attempting to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin(); // Admin can list all users for dashboard
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin(); // Admin can update (e.g., suspend users)
      allow delete: if isOwner(userId) || isAdmin(); // Admin can delete users
    }

    /**
     * @description Manages rental property listings with public read access and owner-only writes.
     * @path /listings/{listingId}
     * @allow (get, list) - Anyone can read listings.
     * @allow (create) - Authenticated user can create a listing with their UID as the userId.
     * @allow (update, delete) - Only the owner of the listing can update or delete it.
     * @deny (create) - Authenticated user creating a listing with a mismatched userId.
     * @deny (update, delete) - Non-owner attempting to update or delete a listing.
     * @principle Enforces document ownership for writes, allows public reads for listings.
     *
     * @fields Required: type, location, price, contact, status, userId, createdAt, images
     * @fields Optional: name, deposit, depositMonths, businessTerms, features, totalUnits, availableUnits
     * @fields Optional (admin-managed): isFeatured, featuredUntil, featuredPaidAt, featuredPaidAmount,
     *                                   isBoosted, boostedUntil, boostedPaidAt, boostedPaidAmount
     */
    match /listings/{listingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }

      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      function landlordApprovalStatus(uid) {
        return get(/databases/$(database)/documents/users/$(uid)).data.landlordApprovalStatus;
      }

      function canCreateListing() {
        return request.auth != null && landlordApprovalStatus(request.auth.uid) == 'approved';
      }

      function isUnitConfigurationValid(data) {
        return !(data.totalUnits != null && data.availableUnits != null && data.availableUnits > data.totalUnits);
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() &&
        canCreateListing() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['type', 'location', 'price', 'contact', 'status', 'userId', 'createdAt', 'images']) &&
        isUnitConfigurationValid(request.resource.data) &&
        (
          !request.resource.data.approvalStatus ||
          request.resource.data.approvalStatus in ['pending', 'auto']
        );
      allow update: if (
        isSignedIn() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId &&
        isUnitConfigurationValid(request.resource.data) &&
        (
          request.resource.data.approvalStatus == resource.data.approvalStatus ||
          request.resource.data.approvalStatus == 'pending' ||
          request.resource.data.approvalStatus == null
        )
      ) || isAdmin();
      allow delete: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin(); // Admin can delete any listing
    }

    /**
     * @description Manages rental types with public read access. Write operations are not permitted.
     * @path /rental_types/{rentalTypeId}
     * @allow (get, list) - Anyone can read rental types.
     * @deny (create, update, delete) - No one can create, update, or delete rental types.
     * @principle Provides public read access to rental type categories.
     */
    match /rental_types/{rentalTypeId} {
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Manages global platform settings for payment features.
     * @path /platformSettings/{document}
     * @allow (read) - Anyone can read platform settings (needed to check if payments enabled)
     * @allow (write) - Only the admin email can modify settings
     * @deny (write) - Non-admin users attempting to change settings
     * @principle Admin-only writes, public reads for feature flags
     */
    match /platformSettings/{document} {
      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      // Anyone can read settings (clients need to know if payment is required)
      allow read: if true;

      // Only admin can write
      allow write: if isAdmin();
    }

    /**
     * @description Payment transactions
     * @path /transactions/{transactionId}
     * @allow (read) - User can read their own transactions, admin can read all
     * @allow (create) - Authenticated user can create transaction
     * @allow (update) - Payment callback system can update (verified by server)
     * @principle User can only see own transactions
     */
    match /transactions/{transactionId} {
      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow list: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null; // Allow server callbacks
    }

    /**
     * @description Landlord verification applications
     */
    match /landlord_applications/{applicationId} {
      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      function isOwner() {
        return request.auth != null && resource.data.userId == request.auth.uid;
      }

      allow get: if isOwner() || isAdmin();
      allow list: if isAdmin();
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow update: if (
        isAdmin() ||
        (request.auth != null && resource.data.userId == request.auth.uid && resource.data.status != 'approved')
      );
    }

    /**
     * @description Admin notifications queue
     */
    match /admin_notifications/{notificationId} {
      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      allow read: if isAdmin();
      allow list: if isAdmin();
      allow create: if request.auth != null;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description M-Pesa callback logs (for debugging)
     * @path /mpesa_callbacks/{callbackId}
     * @allow (read) - Admin only
     * @allow (create) - Server only (via API route)
     * @principle Admin monitoring only
     */
    match /mpesa_callbacks/{callbackId} {
      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      allow read: if isAdmin();
      allow create: if true; // Server creates via API
    }

    /**
     * @description Conversations between tenants and landlords
     * @path /conversations/{conversationId}
     * @allow (read) - Only participants can read
     * @allow (create) - Authenticated user can create if they're a participant
     * @allow (update) - Only participants can update
     * @principle Participants-only access
     */
    match /conversations/{conversationId} {
      allow read: if request.auth != null &&
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null &&
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.keys().hasAll(['participants', 'listingId', 'lastMessage', 'createdAt']);
      allow update: if request.auth != null &&
        request.auth.uid in resource.data.participants;
    }

    /**
     * @description Messages in conversations
     * @path /messages/{messageId}
     * @allow (read) - Authenticated users can read (filtered by conversation)
     * @allow (create) - Sender can create
     * @allow (update) - Sender can update (for read receipts)
     * @principle Sender-based access
     */
    match /messages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.keys().hasAll(['conversationId', 'senderId', 'senderName', 'text', 'createdAt']);
      allow update: if request.auth != null;
    }

    /**
     * @description Viewing schedules
     * @path /viewings/{viewingId}
     * @allow (read) - Tenant or landlord can read
     * @allow (create) - Tenant can create
     * @allow (update) - Landlord can update (approve/decline)
     * @principle Tenant creates, landlord responds
     */
    match /viewings/{viewingId} {
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.tenantId ||
         request.auth.uid == resource.data.landlordId);
      allow create: if request.auth != null &&
        request.resource.data.tenantId == request.auth.uid &&
        request.resource.data.keys().hasAll(['listingId', 'tenantId', 'landlordId', 'requestedDate', 'status', 'createdAt']);
      allow update: if request.auth != null &&
        request.auth.uid == resource.data.landlordId;
    }

    /**
     * @description Property applications
     * @path /applications/{applicationId}
     * @allow (read) - Tenant or landlord can read
     * @allow (create) - Tenant can create
     * @allow (update) - Landlord can update (approve/decline)
     * @principle Tenant creates, landlord responds
     */
    match /applications/{applicationId} {
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.tenantId ||
         request.auth.uid == resource.data.landlordId);
      allow create: if request.auth != null &&
        request.resource.data.tenantId == request.auth.uid &&
        request.resource.data.keys().hasAll(['listingId', 'tenantId', 'landlordId', 'idNumber', 'status', 'createdAt']);
      allow update: if request.auth != null &&
        request.auth.uid == resource.data.landlordId;
    }

    /**
     * @description Rental agreement templates
     * @path /agreements/{agreementId}
     * @allow (read) - Public (anyone can view agreement for a listing)
     * @allow (create, update, delete) - Landlord only
     * @principle Landlord manages, public reads
     */
    match /agreements/{agreementId} {
      allow read: if true;
      allow create: if request.auth != null &&
        request.resource.data.landlordId == request.auth.uid;
      allow update, delete: if request.auth != null &&
        resource.data.landlordId == request.auth.uid;
    }

    /**
     * @description Signed rental agreements
     * @path /signedAgreements/{signedId}
     * @allow (read) - Tenant or landlord can read
     * @allow (create) - Tenant can create (sign)
     * @allow (update, delete) - No one (immutable once signed)
     * @principle Tenant signs, both parties can view, immutable
     */
    match /signedAgreements/{signedId} {
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.tenantId ||
         request.auth.uid == resource.data.landlordId);
      allow create: if request.auth != null &&
        request.resource.data.tenantId == request.auth.uid &&
        request.resource.data.keys().hasAll(['listingId', 'landlordId', 'tenantId', 'tenantDetails', 'signedAt', 'createdAt']);
      // No updates or deletes - signed agreements are immutable
    }

    /**
     * @description Error logs (for monitoring)
     * @path /error_logs/{errorId}
     * @allow (read) - Admin only
     * @allow (create) - Anyone (for error reporting)
     * @principle Public writes for error reporting, admin reads
     */
    match /error_logs/{errorId} {
      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      allow read: if isAdmin();
      allow create: if true; // Allow error reporting from anyone
    }

    /**
     * @description Performance metrics (for monitoring)
     * @path /performance_metrics/{metricId}
     * @allow (read) - Admin only
     * @allow (create) - Anyone (for performance tracking)
     * @principle Public writes for metrics, admin reads
     */
    match /performance_metrics/{metricId} {
      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      allow read: if isAdmin();
      allow create: if true; // Allow metrics from anyone
    }

    /**
     * @description Security audit logs
     * @path /security_logs/{logId}
     * @allow (read) - Admin only
     * @allow (create) - System only
     * @principle Admin monitoring only
     */
    match /security_logs/{logId} {
      function isAdmin() {
        return request.auth != null &&
               request.auth.token.email == 'titwzmaihya@gmail.com';
      }

      allow read: if isAdmin();
      allow create: if request.auth != null; // Logged-in users can create audit logs
    }
  }
}